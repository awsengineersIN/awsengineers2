AWSTemplateFormatVersion: '2010-09-09'
Description: 'Self-Healing Patch Management - Minimized (2 Lambda Functions)'

Parameters:
  NotificationEmail:
    Type: String
    Description: Email for notifications
    
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, test, prod]
    
  DryRunMode:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable dry-run simulation mode
    
  CreateSupportTickets:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Create actual AWS Support tickets

Resources:
  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SelfHealingPatchRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SelfHealingPatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeMaintenanceWindow*
                  - ssm:GetCommandInvocation
                  - ssm:ListCommandInvocations
                  - ssm:DescribeInstancePatchStates
                  - ssm:DescribeInstanceInformation
                  - ec2:DescribeInstances
                  - states:StartExecution
                  - sns:Publish
                  - bedrock:InvokeModel
                  - support:*
                Resource: '*'

  # Step Functions Execution Role
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SelfHealingStepFunctionsRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - ssm:SendCommand
                  - ssm:DescribeInstancePatchStates
                  - sns:Publish
                Resource: '*'

  # SNS Topics
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'patch-remediation-${Environment}'
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  EscalationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'patch-escalation-${Environment}'
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  # Lambda Function 1: Main Analysis Function
  PatchAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'PatchFailureAnalysis-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          DRY_RUN_MODE: !Ref DryRunMode
          STEP_FUNCTIONS_ARN: !Ref RemediationStateMachine
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          # The complete main Lambda function code goes here
          # Replace this placeholder with the actual code from above
          import json
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info("Patch analysis function placeholder - replace with actual code")
              return {'statusCode': 200, 'message': 'Replace with complete code'}

  # Lambda Function 2: Bedrock Support Ticket Function  
  BedrockTicketFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'BedrockSupportTicket-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 600
      MemorySize: 1024
      Environment:
        Variables:
          CREATE_ACTUAL_TICKETS: !Ref CreateSupportTickets
          BEDROCK_MODEL_ID: 'anthropic.claude-3-sonnet-20240229-v1:0'
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          # The complete Bedrock function code goes here
          # Replace this placeholder with the actual code from above
          import json
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info("Bedrock support ticket placeholder - replace with actual code")
              return {'support_ticket_created': True, 'ticket_id': 'placeholder'}

  # Step Functions State Machine
  RemediationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub 'SelfHealingPatch-${Environment}'
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Self-healing patch remediation - simplified",
          "StartAt": "DetermineRemediationStrategy",
          "States": {
            "DetermineRemediationStrategy": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.remediation_plan.strategy",
                  "StringEquals": "disk_space_cleanup",
                  "Next": "DiskSpaceRemediation"
                },
                {
                  "Variable": "$.remediation_plan.strategy",
                  "StringEquals": "service_management",
                  "Next": "ServiceManagement"
                },
                {
                  "Variable": "$.remediation_plan.strategy",
                  "StringEquals": "network_troubleshooting", 
                  "Next": "NetworkTroubleshooting"
                },
                {
                  "Variable": "$.remediation_plan.strategy",
                  "StringEquals": "agent_recovery",
                  "Next": "AgentRecovery"
                }
              ],
              "Default": "CreateSupportTicket"
            },
            "DiskSpaceRemediation": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "CrossPlatformDiskCleanup",
                "InstanceIds.$": "States.Array($.instance_id)"
              },
              "Next": "WaitAndRetry",
              "Catch": [{"ErrorEquals": ["States.ALL"], "Next": "CreateSupportTicket"}]
            },
            "ServiceManagement": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "CrossPlatformServiceManagement",
                "InstanceIds.$": "States.Array($.instance_id)"
              },
              "Next": "WaitAndRetry",
              "Catch": [{"ErrorEquals": ["States.ALL"], "Next": "CreateSupportTicket"}]
            },
            "NetworkTroubleshooting": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "CrossPlatformNetworkTroubleshooting",
                "InstanceIds.$": "States.Array($.instance_id)"
              },
              "Next": "WaitAndRetry",
              "Catch": [{"ErrorEquals": ["States.ALL"], "Next": "CreateSupportTicket"}]
            },
            "AgentRecovery": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "CrossPlatformSSMAgentRecovery",
                "InstanceIds.$": "States.Array($.instance_id)"
              },
              "Next": "WaitAndRetry",
              "Catch": [{"ErrorEquals": ["States.ALL"], "Next": "CreateSupportTicket"}]
            },
            "WaitAndRetry": {
              "Type": "Wait",
              "Seconds": 300,
              "Next": "RetryPatching"
            },
            "RetryPatching": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "AWS-RunPatchBaseline",
                "InstanceIds.$": "States.Array($.instance_id)",
                "Parameters": {
                  "Operation": ["Install"]
                }
              },
              "Next": "WaitForPatching",
              "Catch": [{"ErrorEquals": ["States.ALL"], "Next": "CreateSupportTicket"}]
            },
            "WaitForPatching": {
              "Type": "Wait",
              "Seconds": 900,
              "Next": "CheckSuccess"
            },
            "CheckSuccess": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:describeInstancePatchStates",
              "Parameters": {
                "InstanceIds.$": "States.Array($.instance_id)"
              },
              "Next": "EvaluateResult"
            },
            "EvaluateResult": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.InstancePatchStates[0].FailedCount",
                  "NumericEquals": 0,
                  "Next": "Success"
                }
              ],
              "Default": "CreateSupportTicket"
            },
            "CreateSupportTicket": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${BedrockTicketFunction}",
                "Payload.$": "$"
              },
              "Next": "NotifyEscalation"
            },
            "NotifyEscalation": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${EscalationTopic}",
                "Subject": "🚨 Support Ticket Created - Patch Failed",
                "Message.$": "States.Format('Patch remediation failed for instance {}. Support ticket: {}', $.instance_id, $.Payload.ticket_id)"
              },
              "End": true
            },
            "Success": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${NotificationTopic}",
                "Subject": "✅ Patch Remediation Successful",
                "Message.$": "States.Format('Successfully fixed patch failure on instance {} using {} strategy', $.instance_id, $.remediation_plan.strategy)"
              },
              "End": true
            }
          }
        }

  # EventBridge Rule
  PatchFailureRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'PatchFailureDetection-${Environment}'
      EventPattern:
        source: [aws.ssm]
        detail-type: [Maintenance window execution State-change Notification]
        detail:
          status: [FAILED, TIMED_OUT]
      Targets:
        - Arn: !GetAtt PatchAnalysisFunction.Arn
          Id: MainTarget

  # EventBridge Permission
  EventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PatchAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PatchFailureRule.Arn

  # SSM Documents (same 5 documents as before)
  DiskCleanupDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: CrossPlatformDiskCleanup
      DocumentType: Command
      DocumentFormat: JSON
      Content:
        schemaVersion: '2.2'
        description: 'Cross-platform disk cleanup'
        # Full document content from previous response goes here

  ServiceMgmtDocument:
    Type: AWS::SSM::Document  
    Properties:
      Name: CrossPlatformServiceManagement
      DocumentType: Command
      DocumentFormat: JSON
      Content:
        schemaVersion: '2.2'
        description: 'Cross-platform service management'
        # Full document content from previous response goes here

  ServiceRestartDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: CrossPlatformServiceRestart
      DocumentType: Command
      DocumentFormat: JSON
      Content:
        schemaVersion: '2.2'
        description: 'Cross-platform service restart'
        # Full document content from previous response goes here

  NetworkTroubleshootingDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: CrossPlatformNetworkTroubleshooting
      DocumentType: Command
      DocumentFormat: JSON
      Content:
        schemaVersion: '2.2'
        description: 'Cross-platform network troubleshooting'
        # Full document content from previous response goes here

  AgentRecoveryDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: CrossPlatformSSMAgentRecovery
      DocumentType: Command
      DocumentFormat: JSON
      Content:
        schemaVersion: '2.2'
        description: 'Cross-platform SSM agent recovery'
        # Full document content from previous response goes here

Outputs:
  MainFunctionArn:
    Description: 'Main analysis function ARN'
    Value: !GetAtt PatchAnalysisFunction.Arn
    
  TicketFunctionArn:
    Description: 'Support ticket function ARN'
    Value: !GetAtt BedrockTicketFunction.Arn
    
  StateMachineArn:
    Description: 'Step Functions state machine ARN'
    Value: !Ref RemediationStateMachine
