{
  "schemaVersion": "2.2",
  "description": "Cross-platform service restart after patch remediation",
  "parameters": {
    "executionTimeout": {
      "type": "String",
      "default": "1800",
      "description": "Timeout for command execution"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "WindowsServiceRestart",
      "precondition": {
        "StringEquals": ["platformType", "Windows"]
      },
      "inputs": {
        "timeoutSeconds": "{{ executionTimeout }}",
        "runCommand": [
          "Write-Output 'Starting Windows service restart after patch remediation'",
          "$servicesFile = 'C:\\temp\\stopped_services.txt'",
          "if (Test-Path $servicesFile) {",
          "    $servicesToRestart = Get-Content $servicesFile -ErrorAction SilentlyContinue | Where-Object { $_.Trim() -ne '' }",
          "    $successCount = 0",
          "    $failCount = 0",
          "    foreach ($serviceName in $servicesToRestart) {",
          "        $serviceName = $serviceName.Trim()",
          "        if ($serviceName -ne '') {",
          "            try {",
          "                Start-Service -Name $serviceName -ErrorAction Stop",
          "                Write-Output \"Successfully restarted service: $serviceName\"",
          "                $successCount++",
          "                # Wait a moment between service starts",
          "                Start-Sleep -Seconds 5",
          "            } catch {",
          "                Write-Output \"Failed to restart service: $serviceName - $($_.Exception.Message)\"",
          "                $failCount++",
          "            }",
          "        }",
          "    }",
          "    Write-Output \"Service restart summary: $successCount successful, $failCount failed\"",
          "    # Clean up the tracking file",
          "    Remove-Item $servicesFile -Force -ErrorAction SilentlyContinue",
          "    Write-Output 'Cleaned up service tracking file'",
          "} else {",
          "    Write-Output 'No stopped services file found - no services to restart'",
          "}",
          "# Show final service status",
          "Write-Output 'Final service status check:'",
          "$criticalServices = @('IISADMIN', 'W3SVC', 'MSSQLSERVER')",
          "foreach ($service in $criticalServices) {",
          "    $svc = Get-Service -Name $service -ErrorAction SilentlyContinue",
          "    if ($svc) {",
          "        Write-Output \"$($svc.Name): $($svc.Status)\"",
          "    }",
          "}",
          "Write-Output 'Windows service restart completed'"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "LinuxServiceRestart",
      "precondition": {
        "StringEquals": ["platformType", "Linux"]
      },
      "inputs": {
        "timeoutSeconds": "{{ executionTimeout }}",
        "runCommand": [
          "#!/bin/bash",
          "echo 'Starting Linux service restart after patch remediation'",
          "SERVICES_FILE='/tmp/stopped_services.txt'",
          "if [ -f \"$SERVICES_FILE\" ]; then",
          "    SUCCESS_COUNT=0",
          "    FAIL_COUNT=0",
          "    while IFS= read -r service; do",
          "        if [ -n \"$service\" ] && [ \"$service\" != \"\" ]; then",
          "            if systemctl start \"$service\" 2>/dev/null; then",
          "                echo \"Successfully restarted service: $service\"",
          "                ((SUCCESS_COUNT++))",
          "                # Wait a moment between service starts",
          "                sleep 5",
          "            else",
          "                echo \"Failed to restart service: $service\"",
          "                ((FAIL_COUNT++))",
          "            fi",
          "        fi",
          "    done < \"$SERVICES_FILE\"",
          "    echo \"Service restart summary: $SUCCESS_COUNT successful, $FAIL_COUNT failed\"",
          "    # Clean up the tracking file",
          "    rm -f \"$SERVICES_FILE\"",
          "    echo 'Cleaned up service tracking file'",
          "else",
          "    echo 'No stopped services file found - no services to restart'",
          "fi",
          "# Show final service status for RHEL/CentOS common services",
          "echo 'Final service status check:'",
          "CRITICAL_SERVICES=('httpd' 'nginx' 'apache2' 'mysql' 'mysqld' 'mariadb' 'postgresql')",
          "for service in \"${CRITICAL_SERVICES[@]}\"; do",
          "    if systemctl is-active --quiet \"$service\" 2>/dev/null; then",
          "        echo \"$service: RUNNING\"",
          "    elif systemctl list-unit-files --type=service | grep -q \"^$service.service\"; then",
          "        echo \"$service: STOPPED\"",
          "    fi",
          "done",
          "echo 'Linux service restart completed'"
        ]
      }
    }
  ]
}
