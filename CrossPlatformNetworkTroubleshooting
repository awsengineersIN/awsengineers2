{
  "schemaVersion": "2.2",
  "description": "Cross-platform network troubleshooting for patch remediation",
  "parameters": {
    "executionTimeout": {
      "type": "String",
      "default": "1800",
      "description": "Timeout for command execution"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "WindowsNetworkTroubleshooting",
      "precondition": {
        "StringEquals": ["platformType", "Windows"]
      },
      "inputs": {
        "timeoutSeconds": "{{ executionTimeout }}",
        "runCommand": [
          "Write-Output 'Starting Windows network troubleshooting for patch remediation'",
          "# Test basic connectivity",
          "Write-Output 'Testing basic connectivity...'",
          "try {",
          "    $result = Test-NetConnection -ComputerName '8.8.8.8' -Port 53 -WarningAction SilentlyContinue -ErrorAction Stop",
          "    Write-Output \"Basic connectivity to 8.8.8.8:53 - $($result.TcpTestSucceeded)\"",
          "} catch {",
          "    Write-Output 'Basic connectivity test failed'",
          "}",
          "# Test DNS resolution",
          "Write-Output 'Testing DNS resolution...'",
          "try {",
          "    $dnsResult = Resolve-DnsName 'google.com' -ErrorAction Stop",
          "    Write-Output 'DNS resolution: OK'",
          "} catch {",
          "    Write-Output 'DNS resolution: FAILED'",
          "    # Attempt DNS cache flush",
          "    Write-Output 'Attempting DNS cache flush...'",
          "    ipconfig /flushdns",
          "    Start-Sleep -Seconds 5",
          "    try {",
          "        Resolve-DnsName 'google.com' -ErrorAction Stop",
          "        Write-Output 'DNS resolution after flush: OK'",
          "    } catch {",
          "        Write-Output 'DNS resolution still failing after flush'",
          "    }",
          "}",
          "# Test Windows Update connectivity",
          "Write-Output 'Testing Windows Update connectivity...'",
          "$wuEndpoints = @('windowsupdate.microsoft.com', 'download.microsoft.com', 'update.microsoft.com')",
          "foreach ($endpoint in $wuEndpoints) {",
          "    try {",
          "        $result = Test-NetConnection -ComputerName $endpoint -Port 80 -WarningAction SilentlyContinue",
          "        Write-Output \"$endpoint : $($result.TcpTestSucceeded)\"",
          "    } catch {",
          "        Write-Output \"$endpoint : FAILED\"",
          "    }",
          "}",
          "# Reset network stack if issues detected",
          "Write-Output 'Resetting network stack...'",
          "netsh winsock reset",
          "netsh int ip reset",
          "# Restart Windows Update service",
          "Write-Output 'Restarting Windows Update service...'",
          "try {",
          "    Restart-Service -Name 'wuauserv' -Force -ErrorAction Stop",
          "    Write-Output 'Windows Update service restarted successfully'",
          "} catch {",
          "    Write-Output 'Failed to restart Windows Update service'",
          "}",
          "Write-Output 'Windows network troubleshooting completed'"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "LinuxNetworkTroubleshooting",
      "precondition": {
        "StringEquals": ["platformType", "Linux"]
      },
      "inputs": {
        "timeoutSeconds": "{{ executionTimeout }}",
        "runCommand": [
          "#!/bin/bash",
          "echo 'Starting Linux network troubleshooting for patch remediation'",
          "# Test basic connectivity",
          "echo 'Testing basic connectivity...'",
          "if ping -c 3 8.8.8.8 >/dev/null 2>&1; then",
          "    echo 'Basic connectivity to 8.8.8.8: OK'",
          "else",
          "    echo 'Basic connectivity to 8.8.8.8: FAILED'",
          "fi",
          "# Test DNS resolution", 
          "echo 'Testing DNS resolution...'",
          "if nslookup google.com >/dev/null 2>&1; then",
          "    echo 'DNS resolution: OK'",
          "else",
          "    echo 'DNS resolution: FAILED'",
          "    # Try to restart network services",
          "    echo 'Attempting to restart network services...'",
          "    systemctl restart systemd-resolved 2>/dev/null || true",
          "    sleep 5",
          "    if nslookup google.com >/dev/null 2>&1; then",
          "        echo 'DNS resolution after restart: OK'",
          "    else",
          "        echo 'DNS resolution still failing'",
          "    fi",
          "fi",
          "# Test repository connectivity - RHEL/CentOS specific",
          "echo 'Testing repository connectivity...'",
          "REPO_ENDPOINTS=(",
          "    'mirror.centos.org'",
          "    'download.fedoraproject.org'",
          "    'repo.us-east-1.amazonaws.com'",
          "    'amazonlinux.default.amazonaws.com'",
          "    'rhui-1.microsoft.com'",
          ")",
          "for endpoint in \"${REPO_ENDPOINTS[@]}\"; do",
          "    if curl -I --connect-timeout 10 \"https://$endpoint\" >/dev/null 2>&1; then",
          "        echo \"$endpoint: OK\"",
          "    elif curl -I --connect-timeout 10 \"http://$endpoint\" >/dev/null 2>&1; then",
          "        echo \"$endpoint: OK (HTTP)\"",
          "    else",
          "        echo \"$endpoint: FAILED\"",
          "    fi",
          "done",
          "# Check and restart network services if needed - RHEL compatible",
          "echo 'Checking network services...'",
          "NETWORK_SERVICES=('networking' 'network' 'NetworkManager')",
          "for service in \"${NETWORK_SERVICES[@]}\"; do",
          "    if systemctl is-active --quiet \"$service\" 2>/dev/null; then",
          "        echo \"$service: ACTIVE\"",
          "    elif systemctl list-unit-files --type=service | grep -q \"^$service.service\"; then",
          "        echo \"$service: INACTIVE - attempting restart...\"",
          "        systemctl restart \"$service\" 2>/dev/null || true",
          "    fi",
          "done",
          "# Clear package manager cache - RHEL/CentOS specific",
          "echo 'Clearing package manager cache...'",
          "if command -v yum &> /dev/null; then",
          "    yum clean all 2>/dev/null || true",
          "    yum makecache fast 2>/dev/null || true",
          "    echo 'YUM cache refreshed'",
          "elif command -v dnf &> /dev/null; then",
          "    dnf clean all 2>/dev/null || true",
          "    dnf makecache 2>/dev/null || true",
          "    echo 'DNF cache refreshed'",
          "elif command -v apt-get &> /dev/null; then",
          "    apt-get clean 2>/dev/null || true",
          "    apt-get update 2>/dev/null || true",
          "    echo 'APT cache refreshed'",
          "fi",
          "echo 'Linux network troubleshooting completed'"
        ]
      }
    }
  ]
}
