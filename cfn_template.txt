AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete Self-Healing Patch Management with DynamoDB & Bedrock'

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address for notifications
  
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, test, prod]
    Description: Environment name
  
  DryRunMode:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable dry-run mode by default
  
  BedrockModelId:
    Type: String
    Default: 'anthropic.claude-3-sonnet-20240229-v1:0'
    Description: Bedrock model ID for support ticket generation
  
  CreateSupportTickets:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable actual AWS Support ticket creation

Resources:
  # DynamoDB Table for tracking
  PatchTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'patch-tracking-${Environment}'
      AttributeDefinitions:
        - AttributeName: instance_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: tracking_id
          AttributeType: S
      KeySchema:
        - AttributeName: instance_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: tracking-id-index
          KeySchema:
            - AttributeName: tracking_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          BillingMode: PAY_PER_REQUEST
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Enhanced IAM Role for Lambda Functions
  PatchRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'PatchRemediationLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PatchRemediationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeMaintenanceWindowExecutions
                  - ssm:DescribeMaintenanceWindowExecutionTaskInvocations
                  - ssm:GetCommandInvocation
                  - ssm:SendCommand
                  - ssm:ListCommandInvocations
                  - ssm:DescribeInstanceInformation
                  - ssm:DescribeInstancePatchStates
                  - ec2:DescribeInstances
                  - states:StartExecution
                  - sns:Publish
                  - bedrock:InvokeModel
                  - support:*
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: '*'

  # Enhanced Step Functions Role
  PatchRemediationStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'PatchRemediationStepFunctionsRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - ssm:SendCommand
                  - ssm:ListCommandInvocations
                  - ssm:DescribeInstanceInformation
                  - ec2:RebootInstances
                  - ec2:DescribeInstances
                  - sns:Publish
                Resource: '*'

  # SNS Topics
  PatchRemediationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'patch-remediation-${Environment}'
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  PatchRemediationEscalationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'patch-remediation-escalation-${Environment}'
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  # Lambda Functions
  PatchAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'PatchFailureAnalysis-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt PatchRemediationLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          DRY_RUN_MODE: !Ref DryRunMode
          SNS_TOPIC_ARN: !Ref PatchRemediationTopic
          SNS_ESCALATION_TOPIC_ARN: !Ref PatchRemediationEscalationTopic
          STEP_FUNCTIONS_ARN: !Ref PatchRemediationStateMachine
          DYNAMODB_TABLE_NAME: !Ref PatchTrackingTable
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          # Replace with complete main Lambda function code
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200}

  DryRunSimulationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'DryRunSimulation-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt PatchRemediationLambdaRole.Arn
      Timeout: 300
      MemorySize: 256
      Code:
        ZipFile: |
          # Replace with dry-run simulation code
          import json
          def lambda_handler(event, context):
              return {'Payload': {'dry_run': True}}

  BedrockSupportTicketFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'BedrockSupportTicket-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt PatchRemediationLambdaRole.Arn
      Timeout: 600
      MemorySize: 1024
      Environment:
        Variables:
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          CREATE_ACTUAL_TICKETS: !Ref CreateSupportTickets
          DYNAMODB_TABLE_NAME: !Ref PatchTrackingTable
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          # Replace with complete Bedrock support ticket code
          import json
          def lambda_handler(event, context):
              return {'Payload': {'support_ticket_created': True}}

  UpdateTrackingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'UpdateTracking-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt PatchRemediationLambdaRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref PatchTrackingTable
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          # Replace with complete tracking update code
          import json
          def lambda_handler(event, context):
              return {'Payload': {'success': True}}

  VerifyPatchComplianceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'VerifyPatchCompliance-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt PatchRemediationLambdaRole.Arn
      Timeout: 300
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          import boto3
          
          ssm = boto3.client('ssm')
          
          def lambda_handler(event, context):
              try:
                  if 'Payload' in event:
                      payload = event['Payload']
                  else:
                      payload = event
                      
                  instance_id = payload.get('instance_id')
                  
                  response = ssm.describe_instance_patch_states(
                      InstanceIds=[instance_id]
                  )
                  
                  if response.get('InstancePatchStates'):
                      patch_state = response['InstancePatchStates'][0]
                      failed_count = patch_state.get('FailedCount', 0)
                      
                      if failed_count == 0:
                          return {
                              'Payload': {
                                  'patch_status': 'COMPLIANT',
                                  'instance_id': instance_id
                              }
                          }
                      else:
                          return {
                              'Payload': {
                                  'patch_status': 'NON_COMPLIANT',
                                  'instance_id': instance_id,
                                  'failed_patches': failed_count
                              }
                          }
                  else:
                      return {
                          'Payload': {
                              'patch_status': 'UNKNOWN',
                              'instance_id': instance_id
                          }
                      }
                      
              except Exception as e:
                  return {
                      'Payload': {
                          'patch_status': 'ERROR',
                          'instance_id': instance_id if 'instance_id' in locals() else 'Unknown',
                          'error': str(e)
                      }
                  }

  # Step Functions State Machine
  PatchRemediationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub 'PatchRemediationWorkflow-${Environment}'
      RoleArn: !GetAtt PatchRemediationStepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Complete self-healing patch remediation with DynamoDB tracking and Bedrock support tickets",
          "StartAt": "CheckDryRunMode",
          "States": {
            "CheckDryRunMode": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.remediation_plan.dry_run",
                  "BooleanEquals": true,
                  "Next": "DryRunSimulation"
                }
              ],
              "Default": "ValidateInput"
            },
            "DryRunSimulation": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${DryRunSimulationFunction}",
                "Payload.$": "$"
              },
              "ResultPath": "$.simulation_result",
              "Next": "UpdateDryRunStatus"
            },
            "UpdateDryRunStatus": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${UpdateTrackingFunction}",
                "Payload": {
                  "tracking_id.$": "$.tracking_id",
                  "status": "dry_run_completed",
                  "simulation_result.$": "$.simulation_result"
                }
              },
              "End": true
            },
            "ValidateInput": {
              "Type": "Pass",
              "Next": "UpdateProcessingStarted"
            },
            "UpdateProcessingStarted": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${UpdateTrackingFunction}",
                "Payload": {
                  "tracking_id.$": "$.tracking_id",
                  "status": "remediation_started",
                  "step_functions_execution_arn.$": "$$.Execution.Arn"
                }
              },
              "ResultPath": "$.tracking_update",
              "Next": "DetermineRemediationStrategy"
            },
            "DetermineRemediationStrategy": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.remediation_plan.strategy",
                  "StringEquals": "disk_space_cleanup",
                  "Next": "CrossPlatformDiskSpaceRemediation"
                },
                {
                  "Variable": "$.remediation_plan.strategy",
                  "StringEquals": "service_management",
                  "Next": "CrossPlatformServiceManagement"
                },
                {
                  "Variable": "$.remediation_plan.strategy",
                  "StringEquals": "network_troubleshooting",
                  "Next": "CrossPlatformNetworkRemediation"
                },
                {
                  "Variable": "$.remediation_plan.strategy",
                  "StringEquals": "agent_recovery",
                  "Next": "CrossPlatformAgentRecovery"
                },
                {
                  "Variable": "$.remediation_plan.escalate",
                  "BooleanEquals": true,
                  "Next": "UpdateEscalationStatus"
                }
              ],
              "Default": "UpdateEscalationStatus"
            },
            "CrossPlatformDiskSpaceRemediation": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "CrossPlatformDiskCleanup",
                "InstanceIds.$": "States.Array($.instance_id)",
                "Parameters": {
                  "executionTimeout": ["3600"]
                }
              },
              "ResultPath": "$.remediation_command",
              "Next": "WaitForRemediationCompletion",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.remediation_error",
                  "Next": "CaptureRemediationFailure"
                }
              ]
            },
            "CrossPlatformServiceManagement": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "CrossPlatformServiceManagement",
                "InstanceIds.$": "States.Array($.instance_id)",
                "Parameters": {
                  "executionTimeout": ["3600"]
                }
              },
              "ResultPath": "$.remediation_command",
              "Next": "WaitForRemediationCompletion",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.remediation_error",
                  "Next": "CaptureRemediationFailure"
                }
              ]
            },
            "CrossPlatformNetworkRemediation": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "CrossPlatformNetworkTroubleshooting",
                "InstanceIds.$": "States.Array($.instance_id)",
                "Parameters": {
                  "executionTimeout": ["1800"]
                }
              },
              "ResultPath": "$.remediation_command",
              "Next": "WaitForRemediationCompletion",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.remediation_error",
                  "Next": "CaptureRemediationFailure"
                }
              ]
            },
            "CrossPlatformAgentRecovery": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "CrossPlatformSSMAgentRecovery",
                "InstanceIds.$": "States.Array($.instance_id)",
                "Parameters": {
                  "executionTimeout": ["1800"]
                }
              },
              "ResultPath": "$.remediation_command",
              "Next": "WaitForRemediationCompletion",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.remediation_error",
                  "Next": "CaptureRemediationFailure"
                }
              ]
            },
            "WaitForRemediationCompletion": {
              "Type": "Wait",
              "Seconds": 300,
              "Next": "RestartStoppedServices"
            },
            "RestartStoppedServices": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "CrossPlatformServiceRestart",
                "InstanceIds.$": "States.Array($.instance_id)",
                "Parameters": {
                  "executionTimeout": ["1800"]
                }
              },
              "ResultPath": "$.service_restart_command",
              "Next": "WaitForServiceRestart",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.service_restart_error",
                  "Next": "RetryPatchOperation"
                }
              ]
            },
            "WaitForServiceRestart": {
              "Type": "Wait",
              "Seconds": 120,
              "Next": "RetryPatchOperation"
            },
            "RetryPatchOperation": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
              "Parameters": {
                "DocumentName": "AWS-RunPatchBaseline",
                "InstanceIds.$": "States.Array($.instance_id)",
                "Parameters": {
                  "Operation": ["Install"],
                  "RebootOption": ["RebootIfNeeded"]
                }
              },
              "ResultPath": "$.patch_retry_command",
              "Next": "WaitForPatchCompletion",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.patch_retry_error",
                  "Next": "CaptureRemediationFailure"
                }
              ]
            },
            "WaitForPatchCompletion": {
              "Type": "Wait",
              "Seconds": 900,
              "Next": "VerifyPatchSuccess"
            },
            "VerifyPatchSuccess": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${VerifyPatchComplianceFunction}",
                "Payload.$": "$"
              },
              "ResultPath": "$.compliance_check",
              "Next": "EvaluateSuccess"
            },
            "EvaluateSuccess": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.compliance_check.Payload.patch_status",
                  "StringEquals": "COMPLIANT",
                  "Next": "UpdateSuccessfulRemediation"
                }
              ],
              "Default": "CaptureRemediationFailure"
            },
            "UpdateSuccessfulRemediation": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${UpdateTrackingFunction}",
                "Payload": {
                  "tracking_id.$": "$.tracking_id",
                  "status": "remediation_successful",
                  "final_outcome": "successful",
                  "compliance_check.$": "$.compliance_check"
                }
              },
              "ResultPath": "$.tracking_update",
              "Next": "RemediationSuccessful"
            },
            "CaptureRemediationFailure": {
              "Type": "Pass",
              "Parameters": {
                "failure_context": {
                  "remediation_error.$": "$.remediation_error",
                  "service_restart_error.$": "$.service_restart_error", 
                  "patch_retry_error.$": "$.patch_retry_error",
                  "compliance_check.$": "$.compliance_check",
                  "step_functions_execution_arn.$": "$$.Execution.Name",
                  "failure_timestamp.$": "$$.State.EnteredTime"
                }
              },
              "ResultPath": "$.failure_context",
              "Next": "UpdateFailureContext"
            },
            "UpdateFailureContext": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${UpdateTrackingFunction}",
                "Payload": {
                  "tracking_id.$": "$.tracking_id",
                  "status": "remediation_failed",
                  "final_outcome": "failed",
                  "failure_context.$": "$.failure_context"
                }
              },
              "ResultPath": "$.tracking_update",
              "Next": "CreateBedrockSupportTicket"
            },
            "UpdateEscalationStatus": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${UpdateTrackingFunction}",
                "Payload": {
                  "tracking_id.$": "$.tracking_id",
                  "status": "escalated_to_support",
                  "escalation_reason.$": "$.remediation_plan.strategy_selection_reason"
                }
              },
              "ResultPath": "$.tracking_update",
              "Next": "CreateBedrockSupportTicket"
            },
            "CreateBedrockSupportTicket": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${BedrockSupportTicketFunction}",
                "Payload.$": "$"
              },
              "ResultPath": "$.support_ticket",
              "Next": "NotifyTicketCreation",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.ticket_creation_error",
                  "Next": "FallbackNotification"
                }
              ]
            },
            "NotifyTicketCreation": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${PatchRemediationEscalationTopic}",
                "Subject": "AWS Support Ticket Created - Patch Remediation Failed",
                "Message.$": "States.Format('Automated patch remediation failed for {} instance {}. AWS Support ticket created with ID: {}. Tracking ID: {}', $.remediation_plan.platform, $.instance_id, $.support_ticket.Payload.ticket_id, $.tracking_id)"
              },
              "End": true
            },
            "FallbackNotification": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${PatchRemediationEscalationTopic}",
                "Subject": "Patch Remediation Failed - Support Ticket Creation Error",
                "Message.$": "States.Format('Automated patch remediation failed for {} instance {}. Could not create support ticket. Tracking ID: {}. Manual intervention required.', $.remediation_plan.platform, $.instance_id, $.tracking_id)"
              },
              "End": true
            },
            "RemediationSuccessful": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${PatchRemediationTopic}",
                "Subject": "Cross-Platform Patch Remediation Successful",
                "Message.$": "States.Format('Successfully remediated patch failure on {} instance {} using {} strategy. Tracking ID: {}', $.remediation_plan.platform, $.instance_id, $.remediation_plan.strategy, $.tracking_id)"
              },
              "End": true
            }
          }
        }

  # EventBridge Rule
  PatchFailureEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'MaintenanceWindowFailureDetection-${Environment}'
      Description: 'Captures maintenance window execution state changes'
      EventPattern:
        source:
          - aws.ssm
        detail-type:
          - Maintenance window execution State-change Notification
        detail:
          status:
            - SUCCESS
            - FAILED
            - TIMED_OUT
      Targets:
        - Arn: !GetAtt PatchAnalysisFunction.Arn
          Id: PatchAnalysisTarget

  # EventBridge Lambda Permission
  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PatchAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PatchFailureEventRule.Arn

Outputs:
  PatchTrackingTableName:
    Description: 'Name of the DynamoDB tracking table'
    Value: !Ref PatchTrackingTable
    Export:
      Name: !Sub '${Environment}-PatchTrackingTable'

  EventBridgeRuleArn:
    Description: 'ARN of the EventBridge rule'
    Value: !GetAtt PatchFailureEventRule.Arn
    Export:
      Name: !Sub '${Environment}-EventBridgeRule'

  StepFunctionsArn:
    Description: 'ARN of the remediation Step Functions'
    Value: !Ref PatchRemediationStateMachine
    Export:
      Name: !Sub '${Environment}-StepFunctions'

  BedrockSupportTicketFunctionArn:
    Description: 'ARN of the Bedrock support ticket function'
    Value: !GetAtt BedrockSupportTicketFunction.Arn
    Export:
      Name: !Sub '${Environment}-BedrockSupportTicketFunction'
