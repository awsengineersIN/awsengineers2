import boto3
from botocore.exceptions import ClientError

def get_enabled_regions_for_account():
    """
    Get all regions enabled for the current account
    """
    try:
        # Primary method: Use Account Management API
        account_client = boto3.client('account')
        
        paginator = account_client.get_paginator('list_regions')
        enabled_regions = []
        
        for page in paginator.paginate(
            RegionOptStatusContains=['ENABLED', 'ENABLED_BY_DEFAULT']
        ):
            for region in page['Regions']:
                enabled_regions.append(region['RegionName'])
        
        return enabled_regions
        
    except ClientError as e:
        if e.response['Error']['Code'] in ['AccessDenied', 'UnauthorizedOperation']:
            print("Using fallback method due to insufficient permissions")
            return get_enabled_regions_fallback()
        else:
            raise e

def get_enabled_regions_fallback():
    """
    Fallback: Test regions using STS GetCallerIdentity
    """
    session = boto3.Session()
    all_regions = session.get_available_regions('sts')
    enabled_regions = []
    
    for region in all_regions:
        try:
            sts_client = boto3.client('sts', region_name=region)
            sts_client.get_caller_identity()
            enabled_regions.append(region)
        except Exception:
            continue
    
    return enabled_regions

def lambda_handler(event, context):
    """
    Main handler - processes only regions from event
    """
    # Get regions from event
    if 'region' in event:
        event_regions = [event['region']]
    elif 'regions' in event:
        event_regions = event['regions']
    else:
        return {
            'statusCode': 400,
            'body': 'No regions specified in event'
        }
    
    # Get enabled regions
    enabled_regions = get_enabled_regions_for_account()
    
    # Process only event regions that are enabled
    results = {}
    for region in event_regions:
        if region in enabled_regions:
            try:
                result = process_region(region)
                results[region] = result
            except Exception as e:
                results[region] = f"Error: {str(e)}"
        else:
            results[region] = "Region not accessible"
    
    return {
        'statusCode': 200,
        'body': results
    }
