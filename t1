Got it üëç ‚Äî Oracle‚Äôs Files REST API actually includes file size metadata when you call the list endpoint (/interop/rest/v2/files/list).

So you don‚Äôt need to download the snapshot to know its size ‚Äî you can query it first, extract the size, and log/send it in SES before download.

Here‚Äôs how we can adjust codebuild_script.py:

üîë Change Flow

Call /interop/rest/v2/files/list

Search for "Artifact Snapshot.zip"

If found, capture:

fileName

size (bytes)

lastModifiedTime

Log/print the size (and include it in SES if you want).

Proceed with /files/download only if available.

‚úÖ Example Code Snippet
def get_snapshot_metadata(session, base_url, auth, snapshot_name):
    list_url = f"{base_url}/interop/rest/v2/files/list"
    response = session.get(list_url, auth=auth)
    response.raise_for_status()
    files = response.json().get("items", [])

    for f in files:
        if f.get("name") == snapshot_name:
            size_bytes = f.get("size", 0)
            last_modified = f.get("modifiedTime", "unknown")
            print(f"Snapshot found: {snapshot_name}, Size: {size_bytes} bytes, Last Modified: {last_modified}")
            return size_bytes, last_modified

    raise FileNotFoundError(f"Snapshot {snapshot_name} not found in file listing")


Then in your main logic, before download:

snapshot_name = "Artifact Snapshot.zip"
size_bytes, last_modified = get_snapshot_metadata(session, base_url, auth, snapshot_name)

# Optional: Convert to MB for readability
size_mb = round(size_bytes / (1024*1024), 2)
print(f"Snapshot size: {size_mb} MB (Last modified: {last_modified})")

# Continue with download...


Would you like me to repackage the full codebuild_script.py with this change (snapshot size check + download) so it‚Äôs ready to drop into your CodeBuild setup?

You said:
Yes,
I just need to print the size, name and last modified size
ChatGPT said:

Perfect üëç thanks for clarifying.
I‚Äôll update codebuild_script.py so that before download it will:

List files from Oracle EPM /interop/rest/v2/files/list

Find "Artifact Snapshot.zip"

Print its name, size (in MB), and last modified timestamp

Then continue downloading as usual

Here‚Äôs the full updated file:

codebuild_script.py
import os
import sys
import boto3
import requests
from requests.auth import HTTPBasicAuth

def get_snapshot_metadata(session, base_url, auth, snapshot_name):
    """
    List files and fetch metadata for the snapshot.
    """
    list_url = f"{base_url}/interop/rest/v2/files/list"
    response = session.get(list_url, auth=auth)
    response.raise_for_status()
    files = response.json().get("items", [])

    for f in files:
        if f.get("name") == snapshot_name:
            size_bytes = f.get("size", 0)
            last_modified = f.get("modifiedTime", "unknown")

            # Convert size to MB for readability
            size_mb = round(size_bytes / (1024 * 1024), 2)

            print(f"Snapshot Name: {snapshot_name}")
            print(f"Snapshot Size: {size_mb} MB")
            print(f"Last Modified: {last_modified}")

            return True
    return False


def download_snapshot(session, base_url, auth, snapshot_name, output_file):
    """
    Download the snapshot if available.
    """
    download_url = f"{base_url}/interop/rest/v2/files/{snapshot_name}/download"
    response = session.get(download_url, auth=auth, stream=True)

    if response.status_code == 200:
        with open(output_file, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
        print(f"Downloaded snapshot to {output_file}")
    else:
        raise Exception(f"Failed to download snapshot: {response.status_code} {response.text}")


def upload_to_s3(local_file, bucket_name, s3_key):
    """
    Uploads a file to S3.
    """
    s3 = boto3.client("s3")
    s3.upload_file(local_file, bucket_name, s3_key)
    print(f"Uploaded {local_file} to s3://{bucket_name}/{s3_key}")


def main():
    base_url = os.environ.get("EPM_BASE_URL")
    username = os.environ.get("EPM_USERNAME")
    password = os.environ.get("EPM_PASSWORD")
    bucket_name = os.environ.get("S3_BUCKET_NAME")
    app_name = os.environ.get("APP_NAME", "default")

    if not base_url or not username or not password or not bucket_name:
        print("Missing required environment variables")
        sys.exit(1)

    snapshot_name = "Artifact Snapshot.zip"
    local_file = f"/tmp/{snapshot_name}"
    s3_key = f"{app_name}/{snapshot_name}"

    session = requests.Session()
    auth = HTTPBasicAuth(username, password)

    # Step 1: Get snapshot metadata
    found = get_snapshot_metadata(session, base_url, auth, snapshot_name)
    if not found:
        print(f"Snapshot {snapshot_name} not found in listing.")
        sys.exit(1)

    # Step 2: Download snapshot
    download_snapshot(session, base_url, auth, snapshot_name, local_file)

    # Step 3: Upload to S3
    upload_to_s3(local_file, bucket_name, s3_key)


if __name__ == "__main__":
    main()


üîπ This will now print:

Snapshot Name: Artifact Snapshot.zip
Snapshot Size: 123.45 MB
Last Modified: 2025-09-08T15:42:11Z
Downloaded snapshot to /tmp/Artifact Snapshot.zip
Uploaded /tmp/Artifact Snapshot.zip to s3://my-bucket/myapp/Artifact Snapshot.zip


Do you want me to also include this name/size/last modified info in the SES email body along with build status?
