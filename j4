import groovy.json.JsonSlurper

// Configuration - UPDATE THESE VALUES
def ROLE_ARN = "arn:aws:iam::123456789012:role/JenkinsOrganizationsReadRole"
def EXTERNAL_ID = "your-external-id-here"  // Remove if not needed
def AWS_REGION = "us-east-1"

// Get the SCOPE value from the referenced parameter
def scopeValue = SCOPE

try {
    // Create the assume role command
    def assumeRoleCmd = [
        'aws', 'sts', 'assume-role',
        '--role-arn', ROLE_ARN,
        '--role-session-name', 'jenkins-parameter-discovery'
    ]
    
    // Add external ID if configured
    if (EXTERNAL_ID && EXTERNAL_ID != 'your-external-id-here') {
        assumeRoleCmd.addAll(['--external-id', EXTERNAL_ID])
    }
    
    // Execute assume role
    def assumeProcess = new ProcessBuilder(assumeRoleCmd).start()
    def assumeOutput = assumeProcess.inputStream.text.trim()
    assumeProcess.waitFor()
    
    if (assumeProcess.exitValue() != 0) {
        return ["Error: Failed to assume role"]
    }
    
    // Parse credentials
    def credentials = new JsonSlurper().parseText(assumeOutput).Credentials
    
    def items = []
    
    if (scopeValue == 'Account') {
        // List accounts
        def listAccountsCmd = [
            'aws', 'organizations', 'list-accounts',
            '--query', 'Accounts[?Status==`ACTIVE`].Name',
            '--output', 'json'
        ]
        
        def env = [:]
        env.put('AWS_ACCESS_KEY_ID', credentials.AccessKeyId)
        env.put('AWS_SECRET_ACCESS_KEY', credentials.SecretAccessKey)
        env.put('AWS_SESSION_TOKEN', credentials.SessionToken)
        env.put('AWS_DEFAULT_REGION', AWS_REGION)
        
        def processBuilder = new ProcessBuilder(listAccountsCmd)
        processBuilder.environment().putAll(env)
        
        def process = processBuilder.start()
        def output = process.inputStream.text.trim()
        process.waitFor()
        
        if (process.exitValue() == 0 && output) {
            items = new JsonSlurper().parseText(output)
        }
        
    } else if (scopeValue == 'OU') {
        // Get root OUs first
        def listRootsCmd = [
            'aws', 'organizations', 'list-roots',
            '--query', 'Roots[].Id',
            '--output', 'json'
        ]
        
        def env = [:]
        env.put('AWS_ACCESS_KEY_ID', credentials.AccessKeyId)
        env.put('AWS_SECRET_ACCESS_KEY', credentials.SecretAccessKey)
        env.put('AWS_SESSION_TOKEN', credentials.SessionToken)
        env.put('AWS_DEFAULT_REGION', AWS_REGION)
        
        def processBuilder = new ProcessBuilder(listRootsCmd)
        processBuilder.environment().putAll(env)
        
        def process = processBuilder.start()
        def output = process.inputStream.text.trim()
        process.waitFor()
        
        if (process.exitValue() == 0 && output) {
            def rootIds = new JsonSlurper().parseText(output)
            
            // For each root, get OUs
            rootIds.each { rootId ->
                def listOUsCmd = [
                    'aws', 'organizations', 'list-organizational-units-for-parent',
                    '--parent-id', rootId,
                    '--query', 'OrganizationalUnits[].Name',
                    '--output', 'json'
                ]
                
                def ouProcessBuilder = new ProcessBuilder(listOUsCmd)
                ouProcessBuilder.environment().putAll(env)
                
                def ouProcess = ouProcessBuilder.start()
                def ouOutput = ouProcess.inputStream.text.trim()
                ouProcess.waitFor()
                
                if (ouProcess.exitValue() == 0 && ouOutput) {
                    def ous = new JsonSlurper().parseText(ouOutput)
                    items.addAll(ous)
                }
            }
        }
    }
    
    // Remove duplicates and sort
    items = items.unique().sort()
    
    return items ?: ['No items found']
    
} catch (Exception e) {
    return ["Error: ${e.message}"]
}
