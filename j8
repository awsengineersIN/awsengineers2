Still doesn't work. Can we escape $ before we pass it in get-log-events?
Still doesn't work. Can we escape $ before we pass it in get-log-events?
Yes! You can escape the $ in the log stream name before passing it to the AWS CLI command. Here's the fix:

groovy
stage('Display Lambda Logs') {
    steps {
        script {
            echo "ðŸ“œ Lambda Execution Logs:"
            echo "=" * 80
            
            try {
                def functionName = env.LAMBDA_ARN.split(':')[6]
                def logGroupName = "/aws/lambda/${functionName}"
                
                def logStreamCmd = """
                    aws logs describe-log-streams \\
                        --log-group-name ${logGroupName} \\
                        --order-by LastEventTime \\
                        --descending \\
                        --max-items 1 \\
                        --query 'logStreams[0].logStreamName' \\
                        --output text
                """
                
                def latestStream = sh(script: logStreamCmd, returnStdout: true).trim()
                
                if (latestStream && latestStream != 'None') {
                    echo "ðŸ“‹ Latest Log Stream: ${latestStream}"
                    
                    // Escape $ characters in the log stream name
                    def escapedStream = latestStream.replace('$', '\\$')
                    echo "ðŸ“‹ Escaped Log Stream: ${escapedStream}"
                    
                    def startTime = System.currentTimeMillis() - (10 * 60 * 1000)
                    
                    def logEventsCmd = """
                        aws logs get-log-events \\
                            --log-group-name ${logGroupName} \\
                            --log-stream-name "${escapedStream}" \\
                            --start-time ${startTime} \\
                            --query 'events[*].message' \\
                            --output text
                    """
                    
                    def logs = sh(script: logEventsCmd, returnStdout: true).trim()
                    
                    if (logs && logs != '' && logs != 'None') {
                        echo logs
                    } else {
                        echo "No recent logs found in the last 10 minutes"
                    }
                } else {
                    echo "No log streams found"
                }
                
            } catch (Exception e) {
                echo "Could not retrieve logs: ${e.message}"
            }
            
            echo "=" * 80
        }
    }
}
Alternative approach - Use single quotes in shell:
groovy
stage('Display Lambda Logs') {
    steps {
        script {
            echo "ðŸ“œ Lambda Execution Logs:"
            echo "=" * 80
            
            try {
                def functionName = env.LAMBDA_ARN.split(':')[6]
                def logGroupName = "/aws/lambda/${functionName}"
                
                def logStreamCmd = """
                    aws logs describe-log-streams \\
                        --log-group-name ${logGroupName} \\
                        --order-by LastEventTime \\
                        --descending \\
                        --max-items 1 \\
                        --query 'logStreams[0].logStreamName' \\
                        --output text
                """
                
                def latestStream = sh(script: logStreamCmd, returnStdout: true).trim()
                
                if (latestStream && latestStream != 'None') {
                    echo "ðŸ“‹ Latest Log Stream: ${latestStream}"
                    
                    def startTime = System.currentTimeMillis() - (10 * 60 * 1000)
                    
                    // Use single quotes around the log stream name to prevent shell interpretation
                    def logEventsCmd = """
                        aws logs get-log-events \\
                            --log-group-name ${logGroupName} \\
                            --log-stream-name '${latestStream}' \\
                            --start-time ${startTime} \\
                            --query 'events[*].message' \\
                            --output text
                    """
                    
                    def logs = sh(script: logEventsCmd, returnStdout: true).trim()
                    
                    if (logs && logs != '' && logs != 'None') {
                        echo logs
                    } else {
                        echo "No recent logs found in the last 10 minutes"
                    }
                } else {
                    echo "No log streams found"
                }
                
            } catch (Exception e) {
                echo "Could not retrieve logs: ${e.message}"
            }
            
            echo "=" * 80
        }
    }
}
The key changes:

First approach: Use latestStream.replace('$', '\\$') to escape dollar signs

Second approach: Use single quotes '${latestStream}' instead of double quotes to prevent shell interpretation

Both approaches should handle log stream names containing [$LATEST] properly. The single quotes approach is usually more reliable for this type of issue.
