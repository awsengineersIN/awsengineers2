import groovy.json.JsonSlurper

// Configuration - UPDATE THESE VALUES
def ROLE_ARN = "arn:aws:iam::123456789012:role/JenkinsOrganizationsReadRole"
def EXTERNAL_ID = "your-external-id-here"  // Remove if not needed
def AWS_REGION = "us-east-1"

// Get the SCOPE value from the referenced parameter
def scopeValue = SCOPE

// Python script for AWS API calls
def pythonScript = """
import boto3
import json
import sys

scope = '${scopeValue}'
role_arn = '${ROLE_ARN}'
external_id = '${EXTERNAL_ID}'

try:
    sts = boto3.client('sts', region_name='${AWS_REGION}')
    
    assume_role_kwargs = {
        'RoleArn': role_arn,
        'RoleSessionName': 'jenkins-parameter-discovery'
    }
    
    # Add external ID if configured
    if external_id and external_id != 'your-external-id-here':
        assume_role_kwargs['ExternalId'] = external_id
    
    credentials = sts.assume_role(**assume_role_kwargs)['Credentials']
    
    org_client = boto3.client(
        'organizations',
        aws_access_key_id=credentials['AccessKeyId'],
        aws_secret_access_key=credentials['SecretAccessKey'],
        aws_session_token=credentials['SessionToken']
    )
    
    items = []
    
    if scope == 'Account':
        # List all active accounts
        paginator = org_client.get_paginator('list_accounts')
        for page in paginator.paginate():
            for account in page.get('Accounts', []):
                if account.get('Status') == 'ACTIVE':
                    items.append(account['Name'])
    elif scope == 'OU':
        # List all Organizational Units recursively
        def get_all_ous(parent_id=None):
            ous = []
            if parent_id is None:
                # Start from roots
                roots = org_client.list_roots()['Roots']
                for root in roots:
                    ous.extend(get_all_ous(root['Id']))
            else:
                try:
                    paginator = org_client.get_paginator('list_organizational_units_for_parent')
                    for page in paginator.paginate(ParentId=parent_id):
                        for ou in page.get('OrganizationalUnits', []):
                            ous.append(ou['Name'])
                            # Recursively get child OUs
                            ous.extend(get_all_ous(ou['Id']))
                except Exception:
                    pass  # Skip if we can't access this OU
            return ous
        
        items = get_all_ous()
    
    # Remove duplicates and sort
    items = sorted(list(set(items)))
    
    # Return as JSON
    print(json.dumps(items))
    
except Exception as e:
    print(json.dumps([f'Error: {str(e)}']))
"""

try {
    // Create temporary Python file
    def scriptFile = File.createTempFile("aws_org_script", ".py")
    scriptFile.text = pythonScript
    scriptFile.deleteOnExit()
    
    // Execute Python script
    def process = new ProcessBuilder(['python3', scriptFile.absolutePath]).start()
    def output = process.inputStream.text.trim()
    def errorOutput = process.errorStream.text.trim()
    
    process.waitFor()
    
    if (process.exitValue() == 0 && output) {
        def jsonSlurper = new JsonSlurper()
        def items = jsonSlurper.parseText(output)
        return items ?: ['No items found']
    } else {
        return ["Error: ${errorOutput ?: 'Unknown error occurred'}"]
    }
    
} catch (Exception e) {
    return ["Error: ${e.message}"]
}
