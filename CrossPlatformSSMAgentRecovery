{
  "schemaVersion": "2.2", 
  "description": "Cross-platform SSM agent recovery for patch remediation",
  "parameters": {
    "executionTimeout": {
      "type": "String",
      "default": "1800",
      "description": "Timeout for command execution"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "WindowsSSMAgentRecovery",
      "precondition": {
        "StringEquals": ["platformType", "Windows"]
      },
      "inputs": {
        "timeoutSeconds": "{{ executionTimeout }}",
        "runCommand": [
          "Write-Output 'Starting Windows SSM agent recovery'",
          "# Check current agent status",
          "$service = Get-Service -Name 'AmazonSSMAgent' -ErrorAction SilentlyContinue",
          "if ($service) {",
          "    Write-Output \"Current SSM Agent status: $($service.Status)\"",
          "} else {",
          "    Write-Output 'SSM Agent service not found'",
          "    exit 1",
          "}",
          "# Stop the agent if running",
          "if ($service.Status -eq 'Running') {",
          "    try {",
          "        Stop-Service -Name 'AmazonSSMAgent' -Force -ErrorAction Stop",
          "        Write-Output 'SSM Agent stopped successfully'",
          "    } catch {",
          "        Write-Output \"Failed to stop SSM Agent: $($_.Exception.Message)\"",
          "    }",
          "}",
          "# Wait before restart",
          "Start-Sleep -Seconds 10",
          "# Restart the SSM Agent",
          "try {",
          "    Start-Service -Name 'AmazonSSMAgent' -ErrorAction Stop",
          "    Write-Output 'SSM Agent started successfully'",
          "} catch {",
          "    Write-Output \"Failed to start SSM Agent: $($_.Exception.Message)\"",
          "    exit 1",
          "}",
          "# Wait for agent to initialize",
          "Start-Sleep -Seconds 15",
          "# Verify agent is running and responsive",
          "$finalService = Get-Service -Name 'AmazonSSMAgent'",
          "Write-Output \"Final SSM Agent status: $($finalService.Status)\"",
          "if ($finalService.Status -eq 'Running') {",
          "    Write-Output 'SSM Agent recovery completed successfully'",
          "    # Test agent responsiveness",
          "    Write-Output 'Testing agent responsiveness...'",
          "    $agentStatus = & 'C:\\Program Files\\Amazon\\SSM\\amazon-ssm-agent.exe' -status 2>$null",
          "    if ($LASTEXITCODE -eq 0) {",
          "        Write-Output 'SSM Agent is responsive'",
          "    } else {",
          "        Write-Output 'SSM Agent may not be fully responsive'",
          "    }",
          "} else {",
          "    Write-Output 'SSM Agent recovery failed'",
          "    exit 1",
          "}"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "LinuxSSMAgentRecovery",
      "precondition": {
        "StringEquals": ["platformType", "Linux"]
      },
      "inputs": {
        "timeoutSeconds": "{{ executionTimeout }}",
        "runCommand": [
          "#!/bin/bash",
          "echo 'Starting Linux SSM agent recovery'",
          "# Check if SSM agent service exists",
          "if ! systemctl list-unit-files --type=service | grep -q 'amazon-ssm-agent.service'; then",
          "    echo 'ERROR: SSM Agent service not found'",
          "    exit 1",
          "fi",
          "# Check current agent status",
          "if systemctl is-active --quiet amazon-ssm-agent; then",
          "    echo 'SSM Agent is currently running'",
          "    AGENT_RUNNING=true",
          "else",
          "    echo 'SSM Agent is currently stopped'",
          "    AGENT_RUNNING=false",
          "fi",
          "# Stop the agent if running",
          "if [ \"$AGENT_RUNNING\" = true ]; then",
          "    echo 'Stopping SSM Agent...'",
          "    if sudo systemctl stop amazon-ssm-agent; then",
          "        echo 'SSM Agent stopped successfully'",
          "    else",
          "        echo 'Failed to stop SSM Agent'",
          "    fi",
          "fi",
          "# Wait before restart",
          "sleep 10",
          "# Start the SSM Agent",
          "echo 'Starting SSM Agent...'",
          "if sudo systemctl start amazon-ssm-agent; then",
          "    echo 'SSM Agent started successfully'",
          "else",
          "    echo 'Failed to start SSM Agent'",
          "    exit 1",
          "fi",
          "# Wait for agent to initialize",
          "sleep 15",
          "# Verify agent is running",
          "if systemctl is-active --quiet amazon-ssm-agent; then",
          "    echo 'SSM Agent is now running'",
          "else",
          "    echo 'SSM Agent failed to start properly'",
          "    exit 1",
          "fi",
          "# Show detailed status",
          "echo 'SSM Agent status:'",
          "sudo systemctl status amazon-ssm-agent --no-pager -l",
          "# Check agent logs for any errors",
          "echo 'Recent SSM Agent logs:'",
          "sudo journalctl -u amazon-ssm-agent --no-pager -n 10",
          "# Test agent responsiveness",
          "echo 'Testing agent responsiveness...'",
          "if sudo /usr/bin/amazon-ssm-agent -version >/dev/null 2>&1; then",
          "    echo 'SSM Agent is responsive'",
          "else",
          "    echo 'SSM Agent may not be fully responsive'",
          "fi",
          "echo 'Linux SSM agent recovery completed'"
        ]
      }
    }
  ]
}
